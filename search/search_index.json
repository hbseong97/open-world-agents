{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Open World Agents","text":"<p>Open World Agents is a powerful modular agent system that enables dynamic module registration and real-time event processing. This documentation will guide you through the system's architecture, features, and usage.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Dynamic Module Registration: Modules can be registered and activated at runtime</li> <li>Event-Driven Architecture: Real-time event processing with listeners</li> <li>Extensible Design: Easy to add custom modules and extend functionality</li> <li>Desktop Integration: Built-in support for screen capture, window management, and input handling</li> <li>Cross-Platform: Works on Windows and macOS</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<ol> <li> <p>Install <code>uv</code> following uv installation guide and install <code>conda &amp; mamba</code> following miniforge installation guide</p> </li> <li> <p>Setup your virtual environments. Be aware that in Windows, you must use <code>cmd</code> to use <code>mamba activate</code>.</p> </li> </ol> <pre><code>mamba env create -n owa -f .\\projects\\owa-env-gst\\environment_detail.yml\nmamba activate owa\n</code></pre> <ol> <li>Install the required dependencies. To prevent <code>uv</code> from separating virtual environment's across sub-repositories in mono-repo, you must use <code>python vuv.py</code> instead of <code>uv</code> for every <code>uv</code> command.</li> </ol> <pre><code>python vuv.py sync --inexact --extra envs\n</code></pre> <ol> <li>Import and use the core functionality:</li> </ol> <pre><code>from owa.registry import CALLABLES, LISTENERS, activate_module\n\n# Activate standard environment\nactivate_module(\"owa.env.std\")\n\n# Use registered functions\ntime_ns = CALLABLES[\"clock.time_ns\"]()\nprint(f\"Current time in nanoseconds: {time_ns}\")\n</code></pre>"},{"location":"#project-structure","title":"Project Structure","text":"<pre><code>open-world-agents/\n\u251c\u2500\u2500 projects/\n\u2502   \u251c\u2500\u2500 core/           # Core functionality\n\u2502   \u251c\u2500\u2500 data_collection/# Data collection agents\n\u2502   \u251c\u2500\u2500 owa-env-desktop/\n|   \u251c\u2500\u2500 owa-env-example/\n|   \u251c\u2500\u2500 owa-env-gst/\n\u2502   \u2514\u2500\u2500 minecraft_env/  # Minecraft integration\n\u251c\u2500\u2500 docs/              # Documentation\n\u2514\u2500\u2500 README.md         # Project overview\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! Please see our Contributing Guide for details on how to:</p> <ul> <li>Set up your development environment</li> <li>Submit bug reports</li> <li>Propose new features</li> <li>Create pull requests</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is released under the MIT License. See the LICENSE file for details.</p>"},{"location":"project_overview/","title":"Open World Agents - Detailed Overview","text":"<p>This document provides a comprehensive explanation of the core functionalities and underlying logic of the Open World Agents codebase. Open World Agents is a modular agent system, where a variety of modules are dynamically registered and utilized at runtime. Below, you will find an in-depth description of the core logic, sample code, and a range of additional example projects.</p>"},{"location":"project_overview/#1-introduction","title":"1. Introduction","text":"<p>Open World Agents leverages a registration pattern that allows multiple modules to be dynamically activated during runtime. Each module's functionalities are registered in a global registry using dedicated dictionaries: CALLABLES for synchronous functions and LISTENERS for asynchronous/event-driven listeners.</p>"},{"location":"project_overview/#2-core-architecture-and-registry-pattern","title":"2. Core Architecture and Registry Pattern","text":"<ul> <li>Registry (CALLABLES &amp; LISTENERS):</li> <li>CALLABLES: Stores module-provided functionalities as key-value pairs (e.g., registered as <code>clock.time_ns</code>). What developer must implement is just <code>__call__</code> function.</li> <li>LISTENERS: Manages classes responsible for event handling by storing them under designated keys (e.g., registered as <code>clock/tick</code>). This class takes <code>callback</code> as argument in <code>__init__</code> and otherwise it's same as <code>Runnables</code>.</li> <li>RUNNABLES: This is parent class of <code>Listeners</code> and it supports <code>start/stop/join</code> operations in user side and developer must implement <code>loop/cleanup</code> methods.</li> </ul> <p>Modules are activated via the <code>activate_module</code> function, during which their functions and listeners are systematically added to the global registry.</p>"},{"location":"project_overview/#3-detailed-explanation-of-core-logic","title":"3. Detailed Explanation of Core Logic","text":""},{"location":"project_overview/#31-standard-environment-owaenvstd","title":"3.1. Standard Environment (owa.env.std)","text":"<p>The <code>projects/core/main.py</code> file initiates the standard environment. In the following example:</p> <pre><code>import time\nfrom owa.registry import CALLABLES, LISTENERS, activate_module\n\n# Initial registry state (empty)\nprint(CALLABLES, LISTENERS)  # {}, {}\n\n# Activate the standard module to register clock functionalities\nactivate_module(\"owa.env.std\")\nprint(CALLABLES, LISTENERS)\n# Example: 'clock.time_ns' is registered in CALLABLES and 'clock/tick' in LISTENERS\n\n# Testing the clock/tick listener\ntick = LISTENERS[\"clock/tick\"]()\ntick.configure(callback=lambda: print(CALLABLES[\"clock.time_ns\"]()), interval=1)\ntick.activate()\n\ntime.sleep(1)  # The listener prints the current time in nanoseconds a few times\n\ntick.deactivate()\ntick.shutdown()\n</code></pre> <p>This code demonstrates how activating the standard module registers clock-related functions and listeners, enabling real-time time display.</p>"},{"location":"project_overview/#32-desktop-environment-owaenvdesktop","title":"3.2. Desktop Environment (owa.env.desktop)","text":"<p>After the standard module, the desktop module is activated. This module provides user interface and input-related features. For example:</p> <pre><code># Activate the desktop module to enable UI and input capabilities\nactivate_module(\"owa.env.desktop\")\n\n# Using screen capture and window management features\nprint(CALLABLES[\"screen.capture\"]().shape)  # Example output: (1080, 1920, 3)\nprint(CALLABLES[\"window.get_active_window\"])()\nprint(CALLABLES[\"window.get_window_by_title\"](\"open-world-agents\"))\n\n# Simulating a mouse click (left button, double click)\nmouse_click = CALLABLES[\"mouse.click\"]\nmouse_click(\"left\", 2)\n\n# Configuring a keyboard listener\n\ndef on_keyboard_event(event_type, key):\n    print(f\"Keyboard event: {event_type}, {key}\")\n\nkeyboard_listener = LISTENERS[\"keyboard\"]()\nkeyboard_listener.configure(on_keyboard_event)\nkeyboard_listener.activate()\n\ntime.sleep(5)\n</code></pre> <p>This snippet illustrates functionalities such as capturing the screen, managing windows, handling mouse clicks, and responding to keyboard events.</p>"},{"location":"project_overview/#33-custom-extensions","title":"3.3. Custom Extensions","text":"<p>The framework also supports custom modules. For instance, a module that integrates with Minecraft can be activated and used as shown below:</p> <pre><code># Example of a custom module integration with Minecraft\nactivate_module(\"owa_minecraft\")\ninventory = CALLABLES[\"minecraft.get_inventory\"](player=\"Steve\")\n</code></pre> <p>This flexibility allows developers to extend system capabilities without altering the core codebase.</p>"},{"location":"project_overview/#4-advanced-features-and-extension-points","title":"4. Advanced Features and Extension Points","text":"<ul> <li>Modularity: New modules can be seamlessly added, registered, and activated without modifying existing code.</li> <li>Dynamic Activation: The <code>activate_module</code> function allows modules to be enabled at runtime, enhancing system extensibility and flexibility.</li> <li>Event-Driven Design: Listeners handle asynchronous events, enabling real-time responses to external inputs.</li> </ul>"},{"location":"project_overview/#5-architecture-diagram","title":"5. Architecture Diagram","text":"<p>Below is a diagram illustrating the relationships between core components:</p> <pre><code>graph LR;\n    R[Registry] --&gt;|Registers| SM[\"Standard Module\\n(owa.env.std)\"]\n    R --&gt;|Registers| DM[\"Desktop Module\\n(owa.env.desktop)\"]\n    SM --&gt;|Provides| C1[clock.time_ns]\n    SM --&gt;|Provides| L1[clock/tick Listener]\n    DM --&gt;|Provides| C2[screen.capture]\n    DM --&gt;|Provides| C3[window.get_active_window]\n    DM --&gt;|Provides| L2[keyboard Listener]\n    User --&gt;|Activates| AM[activate_module]\n    AM --&gt; R</code></pre>"},{"location":"project_overview/#6-overview-of-additional-example-projects","title":"6. Overview of Additional Example Projects","text":"<p>Within the <code>/projects</code> directory, besides the core module, several example projects are available:</p> <ul> <li>data_collection: Example projects focusing on data collection and processing agents.</li> <li>minecraft_env: A project that integrates with Minecraft to manipulate and process in-game data.</li> <li>core: Contains the main logic and core modules, including the functionalities discussed above.</li> </ul> <p>These projects showcase the system's extensibility, modularity, and diverse application scenarios.</p>"},{"location":"project_overview/#7-how-to-contribute","title":"7. How to Contribute","text":"<ol> <li>Fork the repository and create a new feature branch.</li> <li>Commit your changes in accordance with the coding guidelines (e.g., adding new modules or enhancing existing ones).</li> <li>Reflect your modifications in both the code and documentation.</li> <li>Submit a pull request for review.</li> <li>Engage in community discussions to incorporate feedback.</li> </ol>"},{"location":"project_overview/#8-license","title":"8. License","text":"<p>This project is released under the MIT License. All contributors are expected to adhere to the project guidelines.</p>"},{"location":"project_overview/#9-in-depth-core-logic-analysis","title":"9. In-Depth Core Logic Analysis","text":"<p>The example in <code>projects/core/main.py</code> demonstrates the following flow:</p> <ul> <li>Initial State: At startup, the CALLABLES and LISTENERS registries are empty.</li> <li>Standard Module Activation: Upon calling <code>activate_module(\"owa.env.std\")</code>, clock-related functionalities such as <code>clock.time_ns</code> and the <code>clock/tick</code> listener are registered.</li> <li>Listener Utilization: The <code>clock/tick</code> listener invokes a callback to print the current time in nanoseconds, illustrating its activation, deactivation, and shutdown processes.</li> <li>Desktop Features: Subsequent activation of <code>owa.env.desktop</code> registers functionalities for screen capture, window management, and input handling.</li> <li>Extensibility: Custom modules (e.g., <code>owa_minecraft</code>) can be integrated effortlessly to extend the system's capabilities.</li> </ul>"},{"location":"project_overview/#10-dependencies-and-environment","title":"10. Dependencies and Environment","text":"<ul> <li>Python Version: The project requires Python 3.11 or higher.</li> <li>Platform-Specific Dependencies:</li> <li>Windows: <code>pygetwindow</code></li> <li>macOS: <code>pyobjc-framework-Quartz</code>, <code>pyobjc-framework-ApplicationServices</code></li> <li>Common Dependencies:</li> <li><code>pynput</code> for keyboard and mouse events</li> <li><code>opencv-python</code> and <code>bettercam</code> for screen capture and image processing</li> <li><code>loguru</code> for logging</li> <li><code>pydantic</code> for data validation and management</li> </ul> <p>The project configuration is defined in the <code>pyproject.toml</code> file, and a suitable virtual environment (e.g., specifying the UV_PROJECT_ENVIRONMENT variable) is required.</p>"},{"location":"project_overview/#11-testing-and-quality-assurance","title":"11. Testing and Quality Assurance","text":"<p>A comprehensive suite of tests ensures the stability and reliability of the core functionalities and modules, located in the <code>projects/core/tests</code> directory. These tests validate:</p> <ul> <li>The correct registration and deregistration of module functionalities.</li> <li>Proper initialization of modules via <code>activate_module</code>.</li> <li>Accurate event handling and callback execution for various listeners (e.g., <code>clock/tick</code>, <code>keyboard</code>).</li> <li>Platform-specific behavior for functionalities like screen capture and window management.</li> </ul> <p>Maintaining robust testing practices ensures the system's stability and extensibility. Contributors are encouraged to update tests alongside their changes.</p>"},{"location":"project_overview/#12-conclusion","title":"12. Conclusion","text":"<p>Open World Agents is designed as a flexible, extensible, and robust framework for developing agent-based solutions with dynamic module loading and real-time event processing. We welcome contributions and discussions from the global open-source community to help enhance and evolve the project.</p> <p>Happy coding, and let's innovate together!</p>"},{"location":"architecture/core_components/","title":"Core Components","text":"<p>The Open World Agents system is built on a set of core components that provide the foundation for modularity and dynamic functionality. These components work together to deliver a scalable and extensible framework:</p> <ul> <li>Global Registry: The system uses two key dictionaries, CALLABLES and LISTENERS, to store and manage functions and event handlers. This design promotes loose coupling between modules.</li> <li>Module Activation: Modules are loaded and activated at runtime using the <code>activate_module</code> function, allowing for dynamic extension of functionalities without impacting the core system.</li> <li>Inter-module Communication: Through the global registry, modules can communicate seamlessly, promoting reusability and decoupling.</li> <li>Core Services: Additional services such as logging, error handling, and configuration management support the operation and integration of various modules.</li> </ul> <p>Each of these components is designed to ensure that new features and modules can be integrated with minimal friction, fostering innovation and rapid development.</p>"},{"location":"architecture/event_system/","title":"Event System","text":"<p>The event system in Open World Agents provides efficient asynchronous event handling through dedicated listener objects. Each listener is designed to monitor and respond to specific events (such as clock ticks or keyboard inputs) by executing pre-configured callbacks.</p>"},{"location":"architecture/event_system/#how-it-works","title":"How It Works","text":"<ul> <li>Listener Activation: Listeners are dynamically activated using configuration methods that set up relevant callbacks and intervals.</li> <li>Asynchronous Processing: Once activated, listeners operate asynchronously, allowing the system to handle events in real time without blocking overall execution.</li> <li>Dynamic Management: Listeners can be deactivated or shut down when they are no longer needed, ensuring flexible event management.</li> </ul> <p>This event-driven architecture is fundamental to achieving responsive and scalable behavior in Open World Agents.</p>"},{"location":"architecture/registry_pattern/","title":"Registry Pattern","text":"<p>The Open World Agents codebase uses a flexible registry pattern to manage module functionalities. This design allows modules to be dynamically registered without modifying the core system.</p>"},{"location":"architecture/registry_pattern/#key-concepts","title":"Key Concepts","text":"<ul> <li>CALLABLES: A global dictionary that stores references to synchronous functions provided by various modules (e.g., <code>clock.time_ns</code>).</li> <li>LISTENERS: A global dictionary that holds event listener classes for handling asynchronous events (e.g., the <code>clock/tick</code> listener).</li> </ul>"},{"location":"architecture/registry_pattern/#module-activation","title":"Module Activation","text":"<p>Modules are activated via the <code>activate_module</code> function. During activation, each module registers its functions and listeners to the global registries, making them available throughout the system.</p>"},{"location":"architecture/registry_pattern/#benefits","title":"Benefits","text":"<ul> <li>Modularity: Seamlessly integrate new functionalities.</li> <li>Dynamic Integration: Enable or disable modules at runtime.</li> <li>Decoupling: Keep the core system independent from specific module implementations.</li> </ul> <p>Further details and advanced usage of the registry pattern will be expanded as the project evolves.</p>"},{"location":"examples/basic_usage/","title":"Basic Usage","text":"<p>This document provides several basic usage examples for Open World Agents to help you get started quickly.</p>"},{"location":"examples/basic_usage/#example-1-activating-modules","title":"Example 1: Activating Modules","text":"<p>Activate the Standard Environment module to register time-based functionalities:</p> <pre><code>from owa.registry import activate_module\n\nactivate_module(\"owa.env.std\")\nprint(CALLABLES)  # Should now include clock.time_ns\n</code></pre>"},{"location":"examples/basic_usage/#example-2-handling-events","title":"Example 2: Handling Events","text":"<p>Set up a simple clock/tick listener to periodically print the current time:</p> <pre><code># Assuming CALLABLES and LISTENERS are imported from owa.registry\n\ntick = LISTENERS[\"clock/tick\"]()\ntick.configure(callback=lambda: print(CALLABLES[\"clock.time_ns\"]()), interval=1)\ntick.activate()\n\nimport time\ntime.sleep(2)\n\ntick.deactivate()\ntick.shutdown()\n</code></pre>"},{"location":"examples/basic_usage/#example-3-interacting-with-the-desktop-environment","title":"Example 3: Interacting with the Desktop Environment","text":"<p>Activate the Desktop Environment module to capture the screen and manage windows:</p> <pre><code>activate_module(\"owa.env.desktop\")\n\n# Capture screen dimensions\nprint(CALLABLES[\"screen.capture\"]().shape)\n\n# Retrieve active window\nprint(CALLABLES[\"window.get_active_window\"])()\n</code></pre> <p>These examples illustrate the fundamental usage patterns of module activation, event management, and interactivity with desktop systems.</p>"},{"location":"examples/custom_extensions/","title":"Custom Extensions","text":"<p>This document provides a brief overview of how to implement custom module extensions in Open World Agents. Custom extensions allow you to integrate domain-specific functionalities seamlessly into the system.</p>"},{"location":"examples/custom_extensions/#example-minecraft-integration","title":"Example: Minecraft Integration","text":"<p>The following example demonstrates how to activate a custom module that integrates with Minecraft. This module provides functionalities to interact with in-game elements:</p> <pre><code># Activate the custom Minecraft module\nactivate_module(\"owa_minecraft\")\n\n# Retrieve the current inventory of a player (e.g., \"Steve\")\ninventory = CALLABLES[\"minecraft.get_inventory\"](player=\"Steve\")\nprint(inventory)\n</code></pre>"},{"location":"examples/custom_extensions/#guidelines-for-developing-custom-extensions","title":"Guidelines for Developing Custom Extensions","text":"<ul> <li>Ensure that your custom module adheres to the registry pattern by registering its functions and listeners to the appropriate global registries.</li> <li>Avoid modifying core functionalities directly; leverage the extendable structure provided by Open World Agents.</li> <li>Write comprehensive tests to ensure compatibility and stability within the broader system.</li> <li>Update documentation as you add new features or extend existing ones.</li> </ul> <p>Custom extensions empower you to tailor the system to your specific needs while benefiting from the core strengths of Open World Agents.</p>"},{"location":"modules/desktop_env/","title":"Desktop Environment","text":"<p>The Desktop Environment module (owa.env.desktop) extends Open World Agents by providing functionalities that interact with the operating system's desktop. It focuses on user interface interactions and input simulation.</p>"},{"location":"modules/desktop_env/#features","title":"Features","text":"<ul> <li>Screen Capture: Capture the current screen using CALLABLES[\"screen.capture\"].</li> <li>Window Management: Retrieve information about active windows and search for windows by title using functions like CALLABLES[\"window.get_active_window\"] and CALLABLES[\"window.get_window_by_title\"].</li> <li>Input Simulation: Simulate mouse actions (e.g., CALLABLES[\"mouse.click\"]) and set up keyboard listeners to handle input events.</li> </ul>"},{"location":"modules/desktop_env/#usage","title":"Usage","text":"<p>To activate the Desktop Environment module, include the following in your code:</p> <pre><code>activate_module(\"owa.env.desktop\")\n</code></pre> <p>After activation, you can access desktop functionalities via the global registries. For example:</p> <pre><code>print(CALLABLES[\"screen.capture\"]().shape)  # Capture and display screen dimensions\nprint(CALLABLES[\"window.get_active_window\"])()  # Retrieve the active window\n</code></pre> <p>This module is essential for applications that require integration with desktop UI elements and user input simulation.</p>"},{"location":"modules/std_env/","title":"Standard Environment","text":"<p>The Standard Environment module (owa.env.std) is a core component of Open World Agents. It provides basic functionalities, such as time management and clock operations, which are essential for system operations.</p>"},{"location":"modules/std_env/#features","title":"Features","text":"<ul> <li>Time Functions: Registers functions like <code>clock.time_ns</code> that return the current time in nanoseconds.</li> <li>Event Listener: Activates event listeners (e.g., <code>clock/tick</code>) to periodically execute time-based callbacks.</li> </ul>"},{"location":"modules/std_env/#usage","title":"Usage","text":"<p>To activate the module, use the following command:</p> <pre><code>activate_module(\"owa.env.std\")\n</code></pre> <p>Once activated, functionalities can be accessed via the global <code>CALLABLES</code> and <code>LISTENERS</code> registries.</p>"}]}