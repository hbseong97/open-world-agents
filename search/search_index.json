{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Open World Agents","text":""},{"location":"#everything-you-need-to-build-state-of-the-art-foundation-multimodal-desktop-agent-end-to-end","title":"Everything you need to build state-of-the-art foundation multimodal desktop agent, end-to-end.","text":"<p>Streamline your agent's lifecycle with Open World Agents. From data capture to model training and real-time evaluation, everything is designed for flexibility and performance.</p> <p>With open-world-agents, you can:</p> <ul> <li>Data Collection: Collect your own desktop data, which contains timestamp-aligned keyboard/mouse control and high-frequency(60Hz+) screen data.<ul> <li>Powered by Windows APIs (<code>DXGI/WGC</code>) and the robust GStreamer framework, ensuring superior performance compared to alternatives. Learn more...</li> </ul> </li> <li>Asynchronous, real-time event processing: Compared to existing LLM-agent frameworks and gymnasium.Env, our platform features an asynchronous processing design leveraging <code>Callables</code>, <code>Listeners</code>, and <code>Runnables</code>. Learn more...</li> <li>Dynamic EnvPlugin Registration: Seamlessly register and activate EnvPlugins\u2014consisting of <code>Callables</code>, <code>Listeners</code>, and <code>Runnables</code>\u2014at runtime to customize and extend functionality. Learn more...</li> <li>Extensible Design: Easy to add custom EnvPlugin and extend functionality. Learn more...</li> <li>Comprehensive Examples: We provides various examples that demonstrates how to build foundation multimodal desktop agent. Since it's just a example, you may customize anything you want.</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<ol> <li> <p>Simple example of using <code>Callables</code> and <code>Listeners</code>. Learn more... <pre><code>import time\n\nfrom owa.registry import CALLABLES, LISTENERS, activate_module\n\n# Activate the standard environment module\nactivate_module(\"owa.env.std\")\n\ndef callback():\n    # Get current time in nanoseconds\n    time_ns = CALLABLES[\"clock.time_ns\"]()\n    print(f\"Current time in nanoseconds: {time_ns}\")\n\n# Create a listener for clock/tick event\ntick = LISTENERS[\"clock/tick\"]().configure(callback=callback)\n\n# Set listener to trigger every 1 second\ntick.configure(interval=1)\n# Start the listener\ntick.start()\n\n# Allow the listener to run for 2 seconds\ntime.sleep(2)\n\n# Stop the listener and wait for it to finish\ntick.stop(), tick.join()\n</code></pre></p> </li> <li> <p>Record your own desktop usage data by just running <code>recorder.exe output.mkv</code>. Learn more...</p> </li> <li> <p>How to register your custom EnvPlugin. Learn more...</p> <ol> <li>Write your own code <pre><code>from owa import Listener\nfrom owa.registry import LISTENERS\n\n\n@LISTENERS.register(\"my/listener\")\nclass MyEventListener(Listener):\n    def loop(self):\n        \"\"\"Main loop. This method must be interruptable by calling stop(), which sets the self._stop_event.\"\"\"\n        while not self._stop_event.is_set():\n            event = wait_and_get_event()\n            self.callback(event)\n\n    def cleanup(self):\n        \"\"\"Clean up resources. This method is called after loop() exits.\"\"\"\n        clean_up()\n</code></pre></li> <li>Use it! <pre><code>from owa.registry import LISTENERS, activate_module\n\nactivate_module(\"your-own-envplugin\")\n\ndef callback(event):\n    print(f\"Captured event: {event}\")\n\nlistener = LISTENERS[\"my/listener\"]().configure(callback=callback)\nlistener.configure(), listener.start()\n\n... # Run any your own logic here. listener is being executed in background as thread(ListenerThread) or process(ListenerProcess).\n\n# Finish it by calling stop and join\nlistener.stop(), listener.join()\n</code></pre></li> </ol> </li> </ol>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! Please see our Contributing Guide for details on how to:</p> <ul> <li>Set up your development environment.</li> <li>Submit bug reports.</li> <li>Propose new features.</li> <li>Create pull requests.</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is released under the MIT License. See the LICENSE file for details.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>We'd love you to contribute to OWA!</p>"},{"location":"contributing/#issues","title":"Issues","text":"<p>Questions, feature requests and bug reports are all welcome as discussions or issues. However, to report a security vulnerability, please see our security policy.</p>"},{"location":"contributing/#pull-requests","title":"Pull Requests","text":"<p>Feel free to create a Pull Request. Project maintainers will take a review quickly and give you a comments.</p> <p>To make contributing as easy and fast as possible, you'll want to run tests and linting locally. Luckily, OWA has few dependencies, doesn't require compiling and tests don't need access to databases, etc. Because of this, setting up and running the tests should be very simple.</p>"},{"location":"contributing/#run-tests","title":"Run tests","text":"<p>We're utilizing <code>pytest</code> for testing and <code>ruff</code> for formatting. Make sure your PR pass all tests in Github Actions.</p>"},{"location":"help_with_owa/","title":"Getting help with OWA","text":"<p>If you need help getting started with OWA or with advanced usage, the following sources may be useful.</p>"},{"location":"help_with_owa/#github-discussions","title":"GitHub Discussions","text":"<p>GitHub discussions are useful for asking questions, your question and the answer will help everyone.</p>"},{"location":"help_with_owa/#direct-messages","title":"Direct Messages","text":"<p>If you need further assistance, please feel free to directly message the main contributors via Slack, Discord, or email:</p> <ul> <li>Suhwan Choi: milkclouds00@gmail.com</li> <li>Yunsung Lee: dldbstjd9751@gmail.com</li> </ul>"},{"location":"install/","title":"Installation","text":""},{"location":"install/#install-from-repository","title":"Install from repository","text":"<ol> <li> <p>Install package managers, uv and conda:</p> <ul> <li>Follow the uv installation guide. If you do prefer quick start, you may <code>pip install uv</code></li> <li>Follow the miniforge installation guide to install <code>conda</code> and <code>mamba</code>. <code>mamba</code> is just a faster <code>conda</code>. If you've already installed <code>conda</code>, you may skip and go ahead. You may use <code>conda</code> instead of <code>mamba</code>.</li> </ul> </li> <li> <p>Setup virtual environments:</p> <ul> <li>(Recommended) Create new environment with dependencies. <code>gstreamer</code> related conda packages are installed. <pre><code>mamba env create -n owa -f projects/owa-env-gst/environment_detail.yml\nconda activate owa\n</code></pre></li> <li>If you want to install conda packages in existing environment, run following: <pre><code>mamba env update --name (your-env-name-here) --file projects/owa-env-gst/environment_detail.yml\n</code></pre></li> </ul> </li> <li> <p>Install required dependencies:</p> <ul> <li>Use <code>python vuv.py</code> instead of <code>uv</code> for all <code>uv</code> commands to prevent <code>uv</code> from separating virtual environments across sub-repositories in a mono-repo. Argument <code>--inexact</code> is needed to prevent <code>uv</code> from deleting non-dependency packages and <code>--extra envs</code> is needed to install EnvPlugin. <pre><code>python vuv.py sync --inexact\n</code></pre></li> <li>To use raw <code>uv</code> binary, you must setup <code>UV_PROJECT_ENVIRONMENT</code> environment variable. see here <pre><code>$ $env:UV_PROJECT_ENVIRONMENT=\"C:\\Users\\MilkClouds\\miniforge3\\envs\\owa\"\n$ uv sync --inexact\n</code></pre></li> </ul> </li> <li> <p>Import and use core functionality:     <pre><code>import time\n\nfrom owa.registry import CALLABLES, LISTENERS, activate_module\n\n# Activate the standard environment module\nactivate_module(\"owa.env.std\")\n\ndef callback():\n    # Get current time in nanoseconds\n    time_ns = CALLABLES[\"clock.time_ns\"]()\n    print(f\"Current time in nanoseconds: {time_ns}\")\n\n# Create a listener for clock/tick event\ntick = LISTENERS[\"clock/tick\"]().configure(callback=callback)\n\n# Set listener to trigger every 1 second\ntick.configure(interval=1)\n# Start the listener\ntick.start()\n\n# Allow the listener to run for 2 seconds\ntime.sleep(2)\n\n# Stop the listener and wait for it to finish\ntick.stop(), tick.join()\n</code></pre></p> </li> </ol>"},{"location":"install/#install-from-pypi-conda-forge-wip","title":"Install from pypi &amp; conda-forge (WIP)","text":"<ul> <li>pypi packages<ul> <li><code>owa-core</code>: this package contains only the core logic to manage OWA's EnvPlugin.</li> <li><code>owa</code>: this package contains several base EnvPlugin along with <code>owa-core</code>. You must install <code>gstramer</code>-related packages in your own.</li> </ul> </li> <li>conda packages<ul> <li><code>owa</code>: this package contains several base EnvPlugin along with <code>owa-core</code>.</li> </ul> </li> </ul>"},{"location":"project_overview/","title":"Project Overview","text":"<p><code>open-world-agents</code> is a mono-repo which is composed with multiple sub-repository.</p> <p>Each sub-repository is a self-contained repository which may have other sub-repository as dependencies.</p> <pre><code>open-world-agents/\n\u251c\u2500\u2500 projects/\n\u2502   \u251c\u2500\u2500 core/           # Core functionality\n\u2502   \u251c\u2500\u2500 data_collection/# Data collection \n\u2502   \u251c\u2500\u2500 owa-env-desktop/\n\u2502   \u251c\u2500\u2500 owa-env-example/\n\u2502   \u251c\u2500\u2500 owa-env-gst/\n\u2502   \u2514\u2500\u2500 minecraft_env/  # Minecraft integration\n\u251c\u2500\u2500 docs/              # Documentation\n\u2514\u2500\u2500 README.md         # Project overview\n</code></pre>"},{"location":"architecture/core_components/","title":"Core Components","text":"<p>The Open World Agents system is built on a set of core components that provide the foundation for modularity and dynamic functionality. These components work together to deliver a scalable and extensible framework:</p> <ul> <li>Global Registry: The system uses two key dictionaries, CALLABLES and LISTENERS, to store and manage functions and event handlers. This design promotes loose coupling between modules.</li> <li>Module Activation: Modules are loaded and activated at runtime using the <code>activate_module</code> function, allowing for dynamic extension of functionalities without impacting the core system.</li> <li>Inter-module Communication: Through the global registry, modules can communicate seamlessly, promoting reusability and decoupling.</li> <li>Core Services: Additional services such as logging, error handling, and configuration management support the operation and integration of various modules.</li> </ul> <p>Each of these components is designed to ensure that new features and modules can be integrated with minimal friction, fostering innovation and rapid development.</p>"},{"location":"architecture/event_system/","title":"Event System","text":"<p>The event system in Open World Agents provides efficient asynchronous event handling through dedicated listener objects. Each listener is designed to monitor and respond to specific events (such as clock ticks or keyboard inputs) by executing pre-configured callbacks.</p>"},{"location":"architecture/event_system/#how-it-works","title":"How It Works","text":"<ul> <li>Listener Activation: Listeners are dynamically activated using configuration methods that set up relevant callbacks and intervals.</li> <li>Asynchronous Processing: Once activated, listeners operate asynchronously, allowing the system to handle events in real time without blocking overall execution.</li> <li>Dynamic Management: Listeners can be deactivated or shut down when they are no longer needed, ensuring flexible event management.</li> </ul> <p>This event-driven architecture is fundamental to achieving responsive and scalable behavior in Open World Agents.</p>"},{"location":"architecture/registry_pattern/","title":"Registry Pattern","text":"<p>The Open World Agents codebase uses a flexible registry pattern to manage module functionalities. This design allows modules to be dynamically registered without modifying the core system.</p>"},{"location":"architecture/registry_pattern/#key-concepts","title":"Key Concepts","text":"<ul> <li>CALLABLES: A global dictionary that stores references to synchronous functions provided by various modules (e.g., <code>clock.time_ns</code>).</li> <li>LISTENERS: A global dictionary that holds event listener classes for handling asynchronous events (e.g., the <code>clock/tick</code> listener).</li> </ul>"},{"location":"architecture/registry_pattern/#module-activation","title":"Module Activation","text":"<p>Modules are activated via the <code>activate_module</code> function. During activation, each module registers its functions and listeners to the global registries, making them available throughout the system.</p>"},{"location":"architecture/registry_pattern/#benefits","title":"Benefits","text":"<ul> <li>Modularity: Seamlessly integrate new functionalities.</li> <li>Dynamic Integration: Enable or disable modules at runtime.</li> <li>Decoupling: Keep the core system independent from specific module implementations.</li> </ul> <p>Further details and advanced usage of the registry pattern will be expanded as the project evolves.</p>"},{"location":"env/","title":"OWA Env - Detailed Overview","text":"<p>This document provides a comprehensive explanation of the core functionalities and underlying logic of the Open World Agents codebase. Open World Agents is a modular agent system, where a variety of modules are dynamically registered and utilized at runtime. Below, you will find an in-depth description of the core logic, sample code, and a range of additional example projects.</p>"},{"location":"env/#1-introduction","title":"1. Introduction","text":"<p>Open World Agents leverages a registration pattern that allows multiple modules to be dynamically activated during runtime. Each module's functionalities are registered in a global registry using dedicated dictionaries: CALLABLES for synchronous functions and LISTENERS for asynchronous/event-driven listeners.</p>"},{"location":"env/#2-core-architecture-and-registry-pattern","title":"2. Core Architecture and Registry Pattern","text":"<ul> <li>Registry:<ul> <li>CALLABLES: Stores module-provided functionalities as key-value pairs (e.g., registered as <code>clock.time_ns</code>). What developer must implement is just <code>__call__</code> function.</li> <li>LISTENERS: Manages classes responsible for event handling by storing them under designated keys (e.g., registered as <code>clock/tick</code>). This class takes <code>callback</code> as argument in <code>configure</code> and otherwise it's same as <code>Runnables</code>.</li> <li>RUNNABLES: This is parent class of <code>Listeners</code> and it supports <code>start/stop/join</code> operations in user side and developer must implement <code>loop/cleanup</code> methods.</li> </ul> </li> </ul> <p>Modules are activated via the <code>activate_module</code> function, during which their functions and listeners are systematically added to the global registry.</p>"},{"location":"env/#3-detailed-explanation-of-core-logic","title":"3. Detailed Explanation of Core Logic","text":""},{"location":"env/#31-standard-environment-owaenvstd","title":"3.1. Standard Environment (owa.env.std)","text":"<p>The <code>projects/core/main.py</code> file initiates the standard environment. In the following example:</p> <pre><code>import time\nfrom owa.registry import CALLABLES, LISTENERS, activate_module\n\n# Initial registry state (empty)\nprint(CALLABLES, LISTENERS)  # {}, {}\n\n# Activate the standard module to register clock functionalities\nactivate_module(\"owa.env.std\")\nprint(CALLABLES, LISTENERS)\n# Example: 'clock.time_ns' is registered in CALLABLES and 'clock/tick' in LISTENERS\n\n# Testing the clock/tick listener\ntick = LISTENERS[\"clock/tick\"]().configure(callback=lambda: print(CALLABLES[\"clock.time_ns\"]()), interval=1)\ntick.start()\n\ntime.sleep(1)  # The listener prints the current time in nanoseconds a few times\n\ntick.stop()\ntick.join()\n</code></pre> <p>This code demonstrates how activating the standard module registers clock-related functions and listeners, enabling real-time time display.</p>"},{"location":"env/#32-desktop-environment-owaenvdesktop","title":"3.2. Desktop Environment (owa.env.desktop)","text":"<p>After the standard module, the desktop module is activated. This module provides user interface and input-related features. For example:</p> <pre><code># Activate the desktop module to enable UI and input capabilities\nactivate_module(\"owa.env.desktop\")\n\n# Using screen capture and window management features\nprint(CALLABLES[\"screen.capture\"]().shape)  # Example output: (1080, 1920, 3)\nprint(CALLABLES[\"window.get_active_window\"])()\nprint(CALLABLES[\"window.get_window_by_title\"](\"open-world-agents\"))\n\n# Simulating a mouse click (left button, double click)\nmouse_click = CALLABLES[\"mouse.click\"]\nmouse_click(\"left\", 2)\n\n# Configuring a keyboard listener\n\ndef on_keyboard_event(event_type, key):\n    print(f\"Keyboard event: {event_type}, {key}\")\n\nkeyboard_listener = LISTENERS[\"keyboard\"]()\nkeyboard_listener.configure(callback=on_keyboard_event)\nkeyboard_listener.activate()\n\ntime.sleep(5)\n\n# Capture screen dimensions\nprint(CALLABLES[\"screen.capture\"]().shape)\n\n# Retrieve active window\nprint(CALLABLES[\"window.get_active_window\"])()\n</code></pre> <p>This snippet illustrates functionalities such as capturing the screen, managing windows, handling mouse clicks, and responding to keyboard events.</p>"},{"location":"env/#33-custom-extensions","title":"3.3. Custom Extensions","text":"<p>The framework also supports custom modules. For instance, a module that integrates with Minecraft can be activated and used as shown below:</p> <pre><code># Example of a custom module integration with Minecraft\nactivate_module(\"owa_minecraft\")\ninventory = CALLABLES[\"minecraft.get_inventory\"](player=\"Steve\")\n</code></pre> <p>This flexibility allows developers to extend system capabilities without altering the core codebase.</p>"},{"location":"env/#4-advanced-features-and-extension-points","title":"4. Advanced Features and Extension Points","text":"<ul> <li>Modularity: New modules can be seamlessly added, registered, and activated without modifying existing code.</li> <li>Dynamic Activation: The <code>activate_module</code> function allows modules to be enabled at runtime, enhancing system extensibility and flexibility.</li> <li>Event-Driven Design: Listeners handle asynchronous events, enabling real-time responses to external inputs.</li> </ul>"},{"location":"env/#5-architecture-diagram","title":"5. Architecture Diagram","text":"<p>Below is a diagram illustrating the relationships between core components:</p> <pre><code>graph LR;\n    R[Registry] --&gt;|Registers| SM[\"Standard Module\\n(owa.env.std)\"]\n    R --&gt;|Registers| DM[\"Desktop Module\\n(owa.env.desktop)\"]\n    SM --&gt;|Provides| C1[clock.time_ns]\n    SM --&gt;|Provides| L1[clock/tick Listener]\n    DM --&gt;|Provides| C2[screen.capture]\n    DM --&gt;|Provides| C3[window.get_active_window]\n    DM --&gt;|Provides| L2[keyboard Listener]\n    User --&gt;|Activates| AM[activate_module]\n    AM --&gt; R</code></pre>"},{"location":"env/#6-overview-of-additional-example-projects","title":"6. Overview of Additional Example Projects","text":"<p>Within the <code>/projects</code> directory, besides the core module, several example projects are available:</p> <ul> <li><code>owa.env.std</code></li> <li><code>owa-env-desktop</code></li> <li><code>owa-env-gst</code></li> </ul>"},{"location":"env/custom_plugins/","title":"How to write your own EnvPlugin","text":"<p>You may write &amp; contribute your own EnvPlugin.</p> <ol> <li>Copy &amp; Paste owa-env-example directory. This directory contains following:     <pre><code>.\n\u251c\u2500\u2500 owa_env_example\n\u2502   \u251c\u2500\u2500 example_callable.py\n\u2502   \u251c\u2500\u2500 example_listener.py\n\u2502   \u251c\u2500\u2500 example_runnable.py\n\u2502   \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 tests\n\u2502   \u2514\u2500\u2500 test_print.py\n\u2514\u2500\u2500 uv.lock\n</code></pre></li> <li>Rename <code>owa-env-example</code> to your own EnvPlugin's name.</li> <li>Write your own code in source folder.</li> <li>Make sure your repository contains all dependencies. We recommend you to use <code>uv</code> as package manager.</li> <li>Make a PR, following Contributing Guide</li> </ol>"},{"location":"env/plugins/desktop_env/","title":"Desktop Environment","text":"<p>To see detailed implementation, skim over owa_env_desktop. API Docs is being written WIP.</p> <p>Below is just a list of callables:</p> <ul> <li><code>mouse.click</code></li> <li><code>mouse.move</code></li> <li><code>mouse.position</code></li> <li><code>mouse.press</code></li> <li><code>mouse.release</code></li> <li> <p><code>mouse.scroll</code></p> </li> <li> <p><code>keyboard.press</code></p> </li> <li><code>keyboard.release</code></li> <li> <p><code>keyboard.type</code></p> </li> <li> <p><code>screen.capture</code>: this module utilize <code>bettercam</code>. For better performance and extensibility, use <code>owa-env-gst</code>'s functions instead.</p> </li> <li> <p><code>window.get_active_window</code></p> </li> <li><code>window.get_window_by_title</code></li> <li><code>window.when_active</code></li> </ul> <p>Below is just a list of listeners:</p> <ul> <li><code>keyboard</code></li> <li><code>mouse</code></li> </ul>"},{"location":"env/plugins/gstreamer_env/","title":"Gstreamer Environment","text":"<p>To see detailed implementation, skim over owa_env_gst. API Docs is being written WIP.</p>"},{"location":"env/plugins/gstreamer_env/#known-issues","title":"Known Issues","text":"<ul> <li>Currently, we only supports Windows OS. Other OS support is in TODO-list, but it's priority is not high.</li> <li> <p>Currently, we only supports device with NVIDIA GPU. This is also in TODO-list, it's priority is higher than multi-OS support.</p> </li> <li> <p>When capturing some screen with <code>WGC</code>(Windows Graphics Capture API, it's being activate when you specify window handle), and with some desktop(not all), above issues are observed.</p> <ul> <li>maximum FPS can't exceed maximum Hz of physical monitor.</li> <li>When capturing <code>Windows Terminal</code> and <code>Discord</code>, the following case was reported. I also guess this phenomena is because of usage of <code>WGC</code>.<ul> <li>When there's no change in window, FPS drops to 1-5 frame.</li> <li>When there's change(e.g. mouse movement) in window, FPS straightly recovers to 60+.</li> </ul> </li> </ul> </li> </ul>"},{"location":"env/plugins/std/","title":"Standard Environment Plugin","text":"<p>The Standard Environment plugin (<code>owa.env.std</code>) is a core component of the Open World Agents framework. It provides essential functionalities related to time management and clock operations, which are fundamental for various time-based tasks and event scheduling within the system.</p>"},{"location":"env/plugins/std/#features","title":"Features","text":"<ul> <li>Time Functions: The plugin registers functions like <code>clock.time_ns</code> that return the current time in nanoseconds.</li> <li>Tick Listener: It includes a <code>clock/tick</code> listener that can be configured to execute callbacks at specified intervals.</li> </ul>"},{"location":"env/plugins/std/#usage","title":"Usage","text":"<p>To activate the Standard Environment plugin, use the following command in your code:</p> <pre><code>from owa.registry import activate_module\n\nactivate_module(\"owa.env.std\")\n</code></pre> <p>Once activated, you can access the registered functions and listeners via the global <code>CALLABLES</code> and <code>LISTENERS</code> registries. For example:</p> <pre><code>from owa.registry import CALLABLES, LISTENERS\n\n# Get the current time in nanoseconds\ncurrent_time_ns = CALLABLES[\"clock.time_ns\"]()\nprint(f\"Current time (ns): {current_time_ns}\")\n\n# Configure and start a tick listener\ndef on_tick():\n    print(f\"Tick at {CALLABLES['clock.time_ns']()}\")\n\ntick_listener = LISTENERS[\"clock/tick\"]()\ntick_listener.configure(callback=on_tick, interval=1)  # Tick every second\ntick_listener.start()\n\n# Run for a few seconds to see the tick listener in action\nimport time\ntime.sleep(5)\n\n# Stop the tick listener\ntick_listener.stop()\ntick_listener.join()\n</code></pre>"},{"location":"env/plugins/std/#components","title":"Components","text":""},{"location":"env/plugins/std/#time-functions","title":"Time Functions","text":"<ul> <li><code>clock.time_ns</code>: Returns the current time in nanoseconds. This function is registered in the <code>CALLABLES</code> registry.</li> </ul>"},{"location":"env/plugins/std/#tick-listener","title":"Tick Listener","text":"<ul> <li><code>clock/tick</code>: A listener that triggers a callback at specified intervals. This listener is registered in the <code>LISTENERS</code> registry and can be configured with an interval in seconds.</li> </ul>"},{"location":"env/plugins/std/#example","title":"Example","text":"<p>Here is a complete example demonstrating how to use the Standard Environment plugin:</p> <pre><code>from owa.registry import CALLABLES, LISTENERS, activate_module\n\n# Activate the Standard Environment plugin\nactivate_module(\"owa.env.std\")\n\n# Print the current time in nanoseconds\nprint(CALLABLES[\"clock.time_ns\"]())\n\n# Define a callback function for the tick listener\ndef tick_callback():\n    print(f\"Tick at {CALLABLES['clock.time_ns']()}\")\n\n# Configure and start the tick listener\ntick_listener = LISTENERS[\"clock/tick\"]().configure(callback=tick_callback, interval=1)\ntick_listener.start()\n\n# Let the listener run for 5 seconds\nimport time\ntime.sleep(5)\n\n# Stop the tick listener\ntick_listener.stop()\ntick_listener.join()\n</code></pre> <p>This example demonstrates how to activate the plugin, retrieve the current time, and set up a tick listener that prints the current time every second.</p> <p>The Standard Environment plugin is a fundamental part of the Open World Agents framework, providing essential time-based functionalities that can be leveraged by other modules and applications.</p>"},{"location":"examples/basic_usage/","title":"Basic Usage","text":"<p>This document provides several basic usage examples for Open World Agents to help you get started quickly.</p>"},{"location":"examples/basic_usage/#example-1-activating-modules","title":"Example 1: Activating Modules","text":"<p>Activate the Standard Environment module to register time-based functionalities:</p> <pre><code>from owa.registry import activate_module\n\nactivate_module(\"owa.env.std\")\nprint(CALLABLES)  # Should now include clock.time_ns\n</code></pre>"},{"location":"examples/basic_usage/#example-2-handling-events","title":"Example 2: Handling Events","text":"<p>Set up a simple clock/tick listener to periodically print the current time:</p> <pre><code># Assuming CALLABLES and LISTENERS are imported from owa.registry\n\ntick = LISTENERS[\"clock/tick\"]()\ntick.configure(callback=lambda: print(CALLABLES[\"clock.time_ns\"]()), interval=1)\ntick.activate()\n\nimport time\ntime.sleep(2)\n\ntick.deactivate()\ntick.shutdown()\n</code></pre>"},{"location":"examples/basic_usage/#example-3-interacting-with-the-desktop-environment","title":"Example 3: Interacting with the Desktop Environment","text":"<p>Activate the Desktop Environment module to capture the screen and manage windows:</p> <pre><code>activate_module(\"owa.env.desktop\")\n\n# Capture screen dimensions\nprint(CALLABLES[\"screen.capture\"]().shape)\n\n# Retrieve active window\nprint(CALLABLES[\"window.get_active_window\"])()\n</code></pre> <p>These examples illustrate the fundamental usage patterns of module activation, event management, and interactivity with desktop systems.</p>"},{"location":"examples/custom_extensions/","title":"Custom Extensions","text":"<p>This document provides a brief overview of how to implement custom module extensions in Open World Agents. Custom extensions allow you to integrate domain-specific functionalities seamlessly into the system.</p>"},{"location":"examples/custom_extensions/#example-minecraft-integration","title":"Example: Minecraft Integration","text":"<p>The following example demonstrates how to activate a custom module that integrates with Minecraft. This module provides functionalities to interact with in-game elements:</p> <pre><code># Activate the custom Minecraft module\nactivate_module(\"owa_minecraft\")\n\n# Retrieve the current inventory of a player (e.g., \"Steve\")\ninventory = CALLABLES[\"minecraft.get_inventory\"](player=\"Steve\")\nprint(inventory)\n</code></pre>"},{"location":"examples/custom_extensions/#guidelines-for-developing-custom-extensions","title":"Guidelines for Developing Custom Extensions","text":"<ul> <li>Ensure that your custom module adheres to the registry pattern by registering its functions and listeners to the appropriate global registries.</li> <li>Avoid modifying core functionalities directly; leverage the extendable structure provided by Open World Agents.</li> <li>Write comprehensive tests to ensure compatibility and stability within the broader system.</li> <li>Update documentation as you add new features or extend existing ones.</li> </ul> <p>Custom extensions empower you to tailor the system to your specific needs while benefiting from the core strengths of Open World Agents.</p>"},{"location":"modules/desktop_env/","title":"Desktop Environment","text":"<p>The Desktop Environment module (owa.env.desktop) extends Open World Agents by providing functionalities that interact with the operating system's desktop. It focuses on user interface interactions and input simulation.</p>"},{"location":"modules/desktop_env/#features","title":"Features","text":"<ul> <li>Screen Capture: Capture the current screen using CALLABLES[\"screen.capture\"].</li> <li>Window Management: Retrieve information about active windows and search for windows by title using functions like CALLABLES[\"window.get_active_window\"] and CALLABLES[\"window.get_window_by_title\"].</li> <li>Input Simulation: Simulate mouse actions (e.g., CALLABLES[\"mouse.click\"]) and set up keyboard listeners to handle input events.</li> </ul>"},{"location":"modules/desktop_env/#usage","title":"Usage","text":"<p>To activate the Desktop Environment module, include the following in your code:</p> <pre><code>activate_module(\"owa.env.desktop\")\n</code></pre> <p>After activation, you can access desktop functionalities via the global registries. For example:</p> <pre><code>print(CALLABLES[\"screen.capture\"]().shape)  # Capture and display screen dimensions\nprint(CALLABLES[\"window.get_active_window\"])()  # Retrieve the active window\n</code></pre> <p>This module is essential for applications that require integration with desktop UI elements and user input simulation.</p>"},{"location":"modules/std_env/","title":"Standard Environment","text":"<p>The Standard Environment module (owa.env.std) is a core component of Open World Agents. It provides basic functionalities, such as time management and clock operations, which are essential for system operations.</p>"},{"location":"modules/std_env/#features","title":"Features","text":"<ul> <li>Time Functions: Registers functions like <code>clock.time_ns</code> that return the current time in nanoseconds.</li> <li>Event Listener: Activates event listeners (e.g., <code>clock/tick</code>) to periodically execute time-based callbacks.</li> </ul>"},{"location":"modules/std_env/#usage","title":"Usage","text":"<p>To activate the module, use the following command:</p> <pre><code>activate_module(\"owa.env.std\")\n</code></pre> <p>Once activated, functionalities can be accessed via the global <code>CALLABLES</code> and <code>LISTENERS</code> registries.</p>"},{"location":"recorder/data_format/","title":"Data format & Conversion","text":""},{"location":"recorder/data_format/#data-format","title":"Data Format","text":"<ul> <li>The main recording will be saved as a Matroska (<code>.mkv</code>) file. This <code>.mkv</code> file contains timestamp, nanoseconds since the epoch, as subtitle. This timestamp is needed to align timestamp between events in <code>.jsonl</code> file and frames in <code>.mkv</code>. </li> <li>Events such as keyboard, mouse, and window events will be logged in an <code>.jsonl</code> file with same name.</li> </ul>"},{"location":"recorder/data_format/#example-data","title":"Example Data","text":"<ul> <li><code>example.jsonl</code> <pre><code>{\"timestamp_ns\":1740134045272214800,\"event_src\":\"control_publisher\",\"event_data\":\"[\\\"mouse.click\\\",1446,1107,left,true]\"}\n{\"timestamp_ns\":1740134045347404600,\"event_src\":\"control_publisher\",\"event_data\":\"[\\\"mouse.click\\\",1446,1107,left,false]\"}\n{\"timestamp_ns\":1740134045978417500,\"event_src\":\"window_publisher\",\"event_data\":\"{\\\"title\\\":\\\"ZType \u2013 Typing Game - Type to Shoot - Chromium\\\",\\\"rect\\\":[1211,789,1727,1353],\\\"hWnd\\\":265272}\"}\n{\"timestamp_ns\":1740134046292540600,\"event_src\":\"control_publisher\",\"event_data\":\"[\\\"mouse.move\\\",1445,1107]\"}\n{\"timestamp_ns\":1740134046293541900,\"event_src\":\"control_publisher\",\"event_data\":\"[\\\"mouse.move\\\",1444,1107]\"}\n{\"timestamp_ns\":1740134046299730700,\"event_src\":\"control_publisher\",\"event_data\":\"[\\\"mouse.move\\\",1435,1107]\"}\n\n# long long mouse moves...\n\n{\"timestamp_ns\":1740134048033194400,\"event_src\":\"control_publisher\",\"event_data\":\"[\\\"mouse.click\\\",1466,1151,left,true]\"}\n{\"timestamp_ns\":1740134048100818900,\"event_src\":\"control_publisher\",\"event_data\":\"[\\\"mouse.click\\\",1466,1151,left,false]\"}\n{\"timestamp_ns\":1740134048267817500,\"event_src\":\"control_publisher\",\"event_data\":\"[\\\"keyboard.press\\\",81]\"}\n{\"timestamp_ns\":1740134048313781500,\"event_src\":\"control_publisher\",\"event_data\":\"[\\\"keyboard.press\\\",87]\"}\n{\"timestamp_ns\":1740134048380686200,\"event_src\":\"control_publisher\",\"event_data\":\"[\\\"keyboard.press\\\",69]\"}\n{\"timestamp_ns\":1740134048448819100,\"event_src\":\"control_publisher\",\"event_data\":\"[\\\"keyboard.release\\\",81]\"}\n{\"timestamp_ns\":1740134048470371900,\"event_src\":\"control_publisher\",\"event_data\":\"[\\\"keyboard.release\\\",87]\"}\n{\"timestamp_ns\":1740134048513648900,\"event_src\":\"control_publisher\",\"event_data\":\"[\\\"mouse.move\\\",1466,1152]\"}\n{\"timestamp_ns\":1740134048514651700,\"event_src\":\"control_publisher\",\"event_data\":\"[\\\"mouse.move\\\",1467,1153]\"}\n{\"timestamp_ns\":1740134048519005500,\"event_src\":\"control_publisher\",\"event_data\":\"[\\\"keyboard.release\\\",69]\"}\n</code></pre></li> <li><code>example.mkv</code>: (width, height) = (502, 557). Note that timestamp is embedded as subtitle.</li> </ul>"},{"location":"recorder/data_format/#how-to-extract-timestamp-from-video-file","title":"How to extract timestamp from video file","text":"<p>With In Progress: reader of OWA data!</p> <pre><code>import subprocess\n\nvideo_file = \"example.mkv\"\nsubtitle_file = \"subtitle.srt\"\ncommand = [\n    \"ffmpeg\",\n    \"-i\",\n    video_file,\n    \"-map\",\n    \"0:s:0\",  # Change this option to select a different subtitle track, if needed\n    subtitle_file,\n    \"-y\",  # Overwrite the output file if it exists\n]\n\nsubprocess.run(command, check=True)\nprint(\"Subtitle extraction complete.\")\n</code></pre> <pre><code>import pysrt\n\n# Open the SRT file\nsubs = pysrt.open('example.srt', encoding='utf-8')\n\n# Iterate through subtitle entries\nfor sub in subs:\n    print(f\"Start: {sub.start}, End: {sub.end}\")\n    print(f\"Text: {sub.text}\\n\")\n</code></pre>"},{"location":"recorder/data_format/#why-mkv-instead-of-mp4","title":"\ud83d\udca1 Why <code>.mkv</code> Instead of <code>.mp4</code>?","text":"<p>OWA's Recorder records in Matroska (<code>.mkv</code>) instead of <code>.mp4</code> to ensure reliability in case of crashes or power failures.  </p> <ul> <li>If a recording is unexpectedly interrupted (e.g., power outage, OBS crash), <code>.mkv</code> files remain recoverable.  </li> <li><code>.mp4</code> files, by contrast, may become corrupted or completely lost if not properly finalized.  </li> </ul> <p>For safety and data integrity, <code>.mkv</code> is the preferred format\u2014you can always convert it later as needed.  </p>"},{"location":"recorder/install_and_usage/","title":"Installation &amp; Usage","text":"<p>This guide will help you install and use the OWA Recorder for high-performance screen recording and event capturing.</p>"},{"location":"recorder/install_and_usage/#installation","title":"Installation","text":""},{"location":"recorder/install_and_usage/#quick-start-guide","title":"Quick-Start Guide","text":"<ol> <li>Download <code>recorder.zip</code> in https://github.com/open-world-agents/open-world-agents/releases</li> <li>unzip <code>recorder.zip</code></li> <li>on <code>cmd</code> or <code>PowerShell</code>, run <code>entrypoint.bat --help</code>. <code>entrypoint.bat</code> unzip <code>env.tar.gz</code>, which is <code>conda</code> env, and run <code>recorder.py</code> with given arguments.<ul> <li>e.g. <code>entrypoint.bat output.mkv</code> is equivalent to <code>recorder.py output.mkv</code></li> </ul> </li> <li>It's all!</li> </ol>"},{"location":"recorder/install_and_usage/#manual-installation-guide","title":"Manual Installation Guide","text":"<p>If you have followed OWA Installation Guide, you can install <code>recorder</code> very easily by simply running:</p> <pre><code>uv pip install -e projects/data_collection\n# `pip install -e projects/data_collection` also work, but slower\n</code></pre>"},{"location":"recorder/install_and_usage/#usage","title":"Usage","text":"<p>The OWA Recorder can be used to capture screen, audio, and various desktop events. Below are the basic usage instructions.</p>"},{"location":"recorder/install_and_usage/#basic-command","title":"Basic Command","text":"<p>To start recording, use the following command: <pre><code>recorder --help\n\n Usage: recorder [OPTIONS] FILE_LOCATION                                                                                                        \n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *    file_location      TEXT  The location of the output file, use `.mkv` extension. [default: None] [required]                              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --record-audio          --no-record-audio                 Whether to record audio [default: record-audio]                                    \u2502\n\u2502 --record-video          --no-record-video                 Whether to record video [default: record-video]                                    \u2502\n\u2502 --record-timestamp      --no-record-timestamp             Whether to record timestamp [default: record-timestamp]                            \u2502\n\u2502 --window-name                                    TEXT     The name of the window to capture, substring of window name is supported           \u2502\n\u2502                                                           [default: None]                                                                    \u2502\n\u2502 --monitor-idx                                    INTEGER  The index of the monitor to capture [default: None]                                \u2502\n\u2502 --install-completion                                      Install completion for the current shell.                                          \u2502\n\u2502 --show-completion                                         Show completion for the current shell, to copy it or customize the installation.   \u2502\n\u2502 --help                                                    Show this message and exit.                                                        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre></p>"},{"location":"recorder/install_and_usage/#example-usage","title":"Example Usage","text":"<ol> <li> <p>Record screen and audio:     <pre><code>recorder output.mkv --record-audio --record-video\n</code></pre></p> </li> <li> <p>Record a specific window:     <pre><code>recorder output.mkv --window-name \"My Application\"\n</code></pre></p> </li> <li> <p>Record a specific monitor:     <pre><code>recorder output.mkv --monitor-idx 1\n</code></pre></p> </li> <li> <p>Disable audio recording:     <pre><code>recorder output.mkv --no-record-audio\n</code></pre></p> </li> </ol>"},{"location":"recorder/install_and_usage/#stopping-the-recording","title":"Stopping the Recording","text":"<p>To stop the recording, simply press <code>Ctrl+C</code>.</p>"},{"location":"recorder/install_and_usage/#additional-information","title":"Additional Information","text":"<ul> <li> <p>Output Files:</p> <ul> <li>For the format of output file, see Data Format Guide</li> </ul> </li> <li> <p>Performance:</p> <ul> <li>OWA Recorder is optimized for high performance with minimal CPU/GPU usage.</li> <li>It supports high-frequency capture (144+ FPS) and real-time performance with sub-1ms latency.</li> </ul> </li> </ul> <p>For more details on the features and performance of OWA Recorder, refer to the Why use OWA Recorder section.</p>"},{"location":"recorder/why/","title":"Why You Should Use OWA's Recorder","text":"<p>OWA's Recorder is a powerful, efficient, and easy-to-use screen recording tool designed for modern workflows. Whether you need precise event tracking, high-performance screen capture, or seamless audio synchronization, it delivers everything in a lightweight yet robust package.  </p>"},{"location":"recorder/why/#key-features","title":"\u2705 Key Features","text":"<ul> <li> <p>\ud83d\udd39 Simple &amp; Intuitive \u2014 Start recording with: <pre><code>recorder FILE_LOCATION\n</code></pre>     Stop with <code>Ctrl+C</code>. Learn more... </p> </li> <li> <p>\ud83c\udfa5 All-in-One Recording \u2014 Captures screen, audio, and timestamps in a single <code>.mkv</code> file.  </p> <ul> <li>Timestamps are embedded as subtitles.  </li> <li>Logs keyboard, mouse, and window events in <code>event.jsonl</code>. For data format, Learn more... </li> </ul> </li> <li> <p>\ud83c\udfaf Flexible Capture Options \u2014 Supports <code>fps</code>, <code>window-name</code>, <code>monitor-index</code>, <code>show-cursor</code>, and more. Learn more...</p> </li> <li> <p>\u26a1 Optimized Performance \u2014 Hardware-accelerated pipeline ensures high FPS with low CPU/GPU usage.  </p> <ul> <li>Uses Windows APIs (<code>DXGI/WGC</code> for screen, <code>WASAPI</code> for audio).  </li> </ul> </li> </ul>"},{"location":"recorder/why/#feature-comparison","title":"\ud83d\udcca Feature Comparison","text":"Feature OWA's Recorder wcap pillow/mss Timestamp embedding (subtitles) \u2705 Yes \u274c No \u274c No Python API support \u2705 Yes \u274c No \u274c No Audio + Window + Keyboard + Mouse \u2705 Yes \u274c No \u274c No Supports latest Windows APIs \u2705 Yes \u2705 Yes \u274c No (legacy APIs only) Hardware-accelerated encoder \u2705 Yes \u2705 Yes \u274c No Optional mouse cursor capture \u2705 Yes \u2705 Yes \u274c No"},{"location":"recorder/why/#performance-benchmark","title":"\u26a1 Performance Benchmark","text":"<p>OWA's Recorder significantly outperforms other Python screen capture tools:  </p> Library Avg. Time per Frame Relative Speed OWA Recorder 5.7 ms \u26a1 1\u00d7 (Fastest) <code>pyscreenshot</code> 33 ms \ud83d\udeb6\u200d\u2642\ufe0f 5.8\u00d7 slower <code>PIL</code> 34 ms \ud83d\udeb6\u200d\u2642\ufe0f 6.0\u00d7 slower <code>MSS</code> 37 ms \ud83d\udeb6\u200d\u2642\ufe0f 6.5\u00d7 slower <code>PyQt5</code> 137 ms \ud83d\udc22 24\u00d7 slower <p>\ud83d\udccc Tested on: Intel i5-11400, GTX 1650  </p> <p>Not only does OWA Recorder achieve higher FPS, but it also maintains lower CPU/GPU usage, making it the ideal choice for screen recording.  </p>"},{"location":"recorder/why/#supported-operating-systems","title":"\ud83d\udda5 Supported Operating Systems","text":"<ul> <li>Windows: Fully optimized with Direct3D 11 integration.  </li> <li>macOS: Work in progress.  </li> <li>Linux: Work in progress.  </li> </ul> <p>\u26a0\ufe0f Recommended Setup: - OS: Windows - GPU: NVIDIA (Recommended for optimal performance, supports for w/o NVIDIA GPU is in TODO)  </p>"}]}